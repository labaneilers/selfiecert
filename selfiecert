#!/bin/bash

red() {
    echo ""
    echo -e "\e[1m\e[31m$1\e[0m"
}

blue() {
    echo ""
    echo -e "\e[1m\e[36m$1\e[0m"
}

green() {
    echo ""
    echo -e "\e[32m$1\e[0m"
}

indent() {
    sed  's/^/     /'
}

check-err() {
    if [ ! "$?" = "0" ]; then
        red "ERROR: selfiecert failed"
        exit 1
    fi
}

main() {
    local script_dir=$(readlink -f $(dirname "$0"))
    local cert_dir="$HOME/.selfiecert"

    local help='usage: selfiecert [-c|--config=<config file path>] [-o|--outdir=<certs output dir>] [--help]
    
Generates a root CA key and cert, along with a website key and cert,
and adds the root CA certificate to the local Windows trust store.

-c|--config: Specify a config file to use instead of the default. 
               An example is here: '$script_dir'/config.cnf
-o|--output: The directory to output the certificate and key files. 
               The default is '$cert_dir''

    if [[ "$@" == *"help"* ]]; then
        echo "$help"
        echo ""
        exit 0
    fi
    
    local ca_serial="$cert_dir/caSerial.srl"
    local config=""
    local ca_private_key="$cert_dir/caKey.pem"
    local ca_public_cert="$cert_dir/caCertificate.pem"
    local cert_private_key="$cert_dir/key.pem"
    local csr="$cert_dir/csr.csr"
    local cert="$cert_dir/certificate.pem"
    local bundle="$cert_dir/bundle.pem"

    PARAMS=""
    while (( "$#" )); do
    case "$1" in
        -c|--config)
        config="$2"
        shift 2
        ;;
        -o|--outdir)
        cert_dir="$2"
        shift 2
        ;;
        --) # end argument parsing
        shift
        break
        ;;
        -*|--*=) # unsupported flags
        red "ERROR: Unsupported flag $1" >&2
        exit 1
        ;;
        *) # preserve positional arguments
        PARAMS="$PARAMS $1"
        shift
        ;;
    esac
    done
    # set positional arguments in their proper place
    eval set -- "$PARAMS"

    local certs_full_path=$(readlink -f "$cert_dir")

    mkdir -p $cert_dir

    if [ "$config" = "" ]; then
        config="$cert_dir/config.cnf"

        cp "$script_dir/selfiecert-config.cnf" "$config"
    else
        if [ ! -f "$config" ]; then
            red "ERROR: Config file not found: $config" >&2
            exit 1
        fi
    fi

    blue "Generating certs to $certs_full_path using config $config..."

    if [ ! -f "$ca_serial" ]; then
        echo "0000000000000000" > "$ca_serial"
    fi

    if [ -f "$ca_private_key" ]; then
        blue "CA private key already exists: using $ca_private_key"
    else 
        blue "Generating root CA private key at $ca_private_key..."
        openssl genrsa -out "$ca_private_key" 4096

        check-err
    fi

    if [ -f "$ca_public_cert" ]; then
        blue "CA root CA public cert already exists: using $ca_public_cert"
    else 
        blue "Generating root CA public cert..."
        openssl req -x509 -new -nodes -key "$ca_private_key" -sha256 -days 1024 -out "$ca_public_cert" -subj "/C=US/ST=FakeState/L=FakeCity/O=FakeOrg/OU=FakeOrgUnit/CN=SelfieCertCA"

        check-err
    fi

    if [ -f "$cert_private_key" ]; then
        blue "Cert private key already exists: using $cert_private_key"
    else 
        blue "Create cert private key..."
        openssl genrsa -out "$cert_private_key" 2048

        check-err
    fi

    if [ -f "$cert" ]; then
        blue "Public cert already exists: using $cert"
    else 
        blue "Create CSR (cert request)..."
        OPENSSL_CONF="$config" openssl req -new -sha256 -batch -key "$cert_private_key" -out "$csr"
        check-err

        blue "Sign CSR to create a certificate..."
        openssl x509 -req -in "$csr" -CA "$ca_public_cert" -CAkey "$ca_private_key" -CAserial "$ca_serial" -out "$cert" -days 500 -sha256 -extensions req_ext -extfile "$config"
        check-err
    fi
    
    blue "Adding CA cert to local trusted root CA store..."
    local ps_path="$script_dir/selfiecert-trust-ca.ps1"
    if [ -f /bin/wslpath ]; then
        ps_path=$(wslpath -w "$ps_path")
    fi
    powershell.exe -Command "$ps_path"
    check-err

    blue "Generating combined cert..."
    cat "$cert" "$ca_public_cert" >> "$bundle"
    
    green "Certs generated successfully in $certs_full_path:"
    find "$certs_full_path" -type f
}

main "$@"
